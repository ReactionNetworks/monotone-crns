#!/usr/bin/env sage

##
# Search for monotone CRNs
#
#
#
# @author Pete Donnell <pete dot donnell at port dot ac dot uk>
# @copyright University of Portsmouth 2014
# @date 01/04/2014
##

import check_vec_monotone
import generate_vectors

# Specify some base parameters to constrain the search space
dimension = 3
dual_number_of_generators = 4
dual_min = 0
dual_max = 1
crn_min = -1
crn_max = 1

# Calculate all possible sets of generators for the dual
dual_all_base_vectors = generate_vectors( dimension, dual_max - dual_min, dual_min )
dual_base_vectors = [vector for vector in itertools.combinations(dual_all_base_vectors, dual_number_of_vectors)]
print( 'Sets of possible dual vectors are ' )
print( dual_base_vectors )
print( '' )

# Calculate all possible CRN vectors
crn_vectors = generate_vectors( dimension, crn_max - crn_min, crn_min )
print( 'CRN vectors to test are ' )
print( crn_vectors )

# Go through each possible dual, and test each CRN in turn
for i in dual_base_vectors:
	dual_cone = Cone([generator in dual_base_vectors[i]])
	print( str( dual_cone.rays() ) )

	# Check that dual is solid, ensuring that the cone is pointed
	if dual_cone.dim() == dimension:
		cone = dual_cone.dual()
		cone_number_of_generators = length( cone.rays() )
		for crn_vector in crn_vectors:
			# To do: check that CRN vector lies in span of cone
			# Check that the CRN vector is 
			if not_red( crn_vector, max( abs( crn_min ), abs( crn_max ) ) ):
				print( 'CRN vector ' + str( crn_vector ) + ' is not reduced.' )
				# process
				if CRNv( cone, dual_cone, crn_vector, dimension, cone_number_of_generators, dual_number_of_generators ):
					print( 'CRN vector ' + str( crn_vector ) + ' is monotone w.r.t. cone generated by ' + str( cone.rays().matrix() )
			else:
				print( 'CRN vector ' + str( crn_vector ) + ' is reduced. Ignoring.' )
	else:
		print( 'Dual cone ' + str( dual_cone.rays() ) + ' is not solid. Ignoring.' )
