#!/usr/bin/env sage

##
# Search for monotone CRNs
#
# To do: write long description
#
# @author Pete Donnell <pete dot donnell at port dot ac dot uk>
# @copyright University of Portsmouth 2014
# @date 08/04/2014
##

import check_vec_monotone as cvm
import generate_vectors as gv
import itertools
import numpy

# Specify some base parameters to constrain the search space
dimension = 3
dual_number_of_generators = 4
dual_min = 0
dual_max = 1
crn_min = -2
crn_max = 2

# Calculate all possible sets of generators for the dual
dual_all_base_vectors = gv.generate_vectors( dimension, dual_max - dual_min, dual_min )
dual_base_vectors = [vector for vector in itertools.combinations(dual_all_base_vectors, dual_number_of_generators)]
print( 'Sets of possible dual vectors are ' )
print( dual_base_vectors )
print( '' )

# Calculate all possible CRN vectors
crn_vectors = gv.generate_vectors( dimension, crn_max - crn_min, crn_min )
print( 'CRN vectors to test are ' )
print( crn_vectors )
print( '' )

# Go through each possible dual, and test each CRN in turn
for set_of_base_vectors in dual_base_vectors:
	dual_cone = Cone( [generator.tolist() for generator in set_of_base_vectors] )
	print( str( dual_cone.rays() ) )

	# Check that dual is solid, ensuring that the cone is pointed
	if dual_cone.dim() == dimension:
		cone = dual_cone.dual()
		cone_number_of_generators = len( cone.rays() )
		dual_cone_number_of_primitive_generators = len( dual_cone.rays() )
		for crn_vector in crn_vectors:
			# To do: check that CRN vector lies in span of cone
			# To do: check that the CRN vector is not reducible by a (positive) integer factor
			if cvm.not_red( crn_vector ):
				print( 'CRN vector ' + str( crn_vector ) + ' can be reduced. Ignoring.' )
			else:
				#print( 'CRN vector ' + str( crn_vector ) + ' is not reduced.' )
				# process
				cone_matrix = cone.rays().column_matrix()
				dual_cone_matrix = dual_cone.rays().matrix()
				cone_rays = numpy.array( [numpy.array( column_vector ) for column_vector in cone_matrix ] )
				dual_cone_rays = numpy.array( [numpy.array( column_vector ) for column_vector in dual_cone_matrix ] )
				if cvm.CRNv( cone_rays, dual_cone_rays, crn_vector, dimension, dual_cone_number_of_primitive_generators, cone_number_of_generators ):
					print( 'CRN vector ' + str( crn_vector ) + ' is monotone w.r.t. cone generated by columns of' )
					print( str( cone.rays().column_matrix() ) )
	else:
		print( 'Dual cone ' + str( dual_cone.rays() ) + ' is not solid. Ignoring.' )
	print( '' )
